// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.entities;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TopicProduceResponse extends Table {
  public static TopicProduceResponse getRootAsTopicProduceResponse(ByteBuffer _bb) { return getRootAsTopicProduceResponse(_bb, new TopicProduceResponse()); }
  public static TopicProduceResponse getRootAsTopicProduceResponse(ByteBuffer _bb, TopicProduceResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TopicProduceResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short topicId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public TopicPartitionProduceResponse partitionResponses(int j) { return partitionResponses(new TopicPartitionProduceResponse(), j); }
  public TopicPartitionProduceResponse partitionResponses(TopicPartitionProduceResponse obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int partitionResponsesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createTopicProduceResponse(FlatBufferBuilder builder,
      short topicId,
      int partitionResponsesOffset) {
    builder.startObject(2);
    TopicProduceResponse.addPartitionResponses(builder, partitionResponsesOffset);
    TopicProduceResponse.addTopicId(builder, topicId);
    return TopicProduceResponse.endTopicProduceResponse(builder);
  }

  public static void startTopicProduceResponse(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addTopicId(FlatBufferBuilder builder, short topicId) { builder.addShort(0, topicId, 0); }
  public static void addPartitionResponses(FlatBufferBuilder builder, int partitionResponsesOffset) { builder.addOffset(1, partitionResponsesOffset, 0); }
  public static int createPartitionResponsesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPartitionResponsesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTopicProduceResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

