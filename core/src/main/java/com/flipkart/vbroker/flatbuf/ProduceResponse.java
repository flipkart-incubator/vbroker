// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.flatbuf;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ProduceResponse extends Table {
    public static ProduceResponse getRootAsProduceResponse(ByteBuffer _bb) {
        return getRootAsProduceResponse(_bb, new ProduceResponse());
    }

    public static ProduceResponse getRootAsProduceResponse(ByteBuffer _bb, ProduceResponse obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createProduceResponse(FlatBufferBuilder builder,
                                            int topicResponsesOffset) {
        builder.startObject(1);
        ProduceResponse.addTopicResponses(builder, topicResponsesOffset);
        return ProduceResponse.endProduceResponse(builder);
    }

    public static void startProduceResponse(FlatBufferBuilder builder) {
        builder.startObject(1);
    }

    public static void addTopicResponses(FlatBufferBuilder builder, int topicResponsesOffset) {
        builder.addOffset(0, topicResponsesOffset, 0);
    }

    public static int createTopicResponsesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startTopicResponsesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endProduceResponse(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public ProduceResponse __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public TopicProduceResponse topicResponses(int j) {
        return topicResponses(new TopicProduceResponse(), j);
    }

    public TopicProduceResponse topicResponses(TopicProduceResponse obj, int j) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int topicResponsesLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }
}

