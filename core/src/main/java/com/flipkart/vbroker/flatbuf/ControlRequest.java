// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.flatbuf;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ControlRequest extends Table {
    public static ControlRequest getRootAsControlRequest(ByteBuffer _bb) {
        return getRootAsControlRequest(_bb, new ControlRequest());
    }

    public static ControlRequest getRootAsControlRequest(ByteBuffer _bb, ControlRequest obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createControlRequest(FlatBufferBuilder builder,
                                           int payloadOffset) {
        builder.startObject(1);
        ControlRequest.addPayload(builder, payloadOffset);
        return ControlRequest.endControlRequest(builder);
    }

    public static void startControlRequest(FlatBufferBuilder builder) {
        builder.startObject(1);
    }

    public static void addPayload(FlatBufferBuilder builder, int payloadOffset) {
        builder.addOffset(0, payloadOffset, 0);
    }

    public static int createPayloadVector(FlatBufferBuilder builder, byte[] data) {
        builder.startVector(1, data.length, 1);
        for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]);
        return builder.endVector();
    }

    public static void startPayloadVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(1, numElems, 1);
    }

    public static int endControlRequest(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public ControlRequest __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public byte payload(int j) {
        int o = __offset(4);
        return o != 0 ? bb.get(__vector(o) + j * 1) : 0;
    }

    public int payloadLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer payloadAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }
}

