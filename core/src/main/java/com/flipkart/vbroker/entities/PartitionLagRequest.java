// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.entities;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PartitionLagRequest extends Table {
    public static PartitionLagRequest getRootAsPartitionLagRequest(ByteBuffer _bb) {
        return getRootAsPartitionLagRequest(_bb, new PartitionLagRequest());
    }

    public static PartitionLagRequest getRootAsPartitionLagRequest(ByteBuffer _bb, PartitionLagRequest obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createPartitionLagRequest(FlatBufferBuilder builder,
                                                short partitionId) {
        builder.startObject(1);
        PartitionLagRequest.addPartitionId(builder, partitionId);
        return PartitionLagRequest.endPartitionLagRequest(builder);
    }

    public static void startPartitionLagRequest(FlatBufferBuilder builder) {
        builder.startObject(1);
    }

    public static void addPartitionId(FlatBufferBuilder builder, short partitionId) {
        builder.addShort(0, partitionId, 0);
    }

    public static int endPartitionLagRequest(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public PartitionLagRequest __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public short partitionId() {
        int o = __offset(4);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }
}

