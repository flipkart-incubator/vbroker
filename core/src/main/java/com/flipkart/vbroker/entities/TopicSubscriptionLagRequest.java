// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.entities;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TopicSubscriptionLagRequest extends Table {
    public static TopicSubscriptionLagRequest getRootAsTopicSubscriptionLagRequest(ByteBuffer _bb) {
        return getRootAsTopicSubscriptionLagRequest(_bb, new TopicSubscriptionLagRequest());
    }

    public static TopicSubscriptionLagRequest getRootAsTopicSubscriptionLagRequest(ByteBuffer _bb, TopicSubscriptionLagRequest obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createTopicSubscriptionLagRequest(FlatBufferBuilder builder,
                                                        short subscriptionId,
                                                        short topiId,
                                                        int partitionLagsOffset) {
        builder.startObject(3);
        TopicSubscriptionLagRequest.addPartitionLags(builder, partitionLagsOffset);
        TopicSubscriptionLagRequest.addTopiId(builder, topiId);
        TopicSubscriptionLagRequest.addSubscriptionId(builder, subscriptionId);
        return TopicSubscriptionLagRequest.endTopicSubscriptionLagRequest(builder);
    }

    public static void startTopicSubscriptionLagRequest(FlatBufferBuilder builder) {
        builder.startObject(3);
    }

    public static void addSubscriptionId(FlatBufferBuilder builder, short subscriptionId) {
        builder.addShort(0, subscriptionId, 0);
    }

    public static void addTopiId(FlatBufferBuilder builder, short topiId) {
        builder.addShort(1, topiId, 0);
    }

    public static void addPartitionLags(FlatBufferBuilder builder, int partitionLagsOffset) {
        builder.addOffset(2, partitionLagsOffset, 0);
    }

    public static int createPartitionLagsVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startPartitionLagsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endTopicSubscriptionLagRequest(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public TopicSubscriptionLagRequest __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public short subscriptionId() {
        int o = __offset(4);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }

    public short topiId() {
        int o = __offset(6);
        return o != 0 ? bb.getShort(o + bb_pos) : 0;
    }

    public PartitionLagRequest partitionLags(int j) {
        return partitionLags(new PartitionLagRequest(), j);
    }

    public PartitionLagRequest partitionLags(PartitionLagRequest obj, int j) {
        int o = __offset(8);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int partitionLagsLength() {
        int o = __offset(8);
        return o != 0 ? __vector_len(o) : 0;
    }
}

