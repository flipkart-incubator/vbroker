// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.entities;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class GetTopicsRequest extends Table {
    public static GetTopicsRequest getRootAsGetTopicsRequest(ByteBuffer _bb) {
        return getRootAsGetTopicsRequest(_bb, new GetTopicsRequest());
    }

    public static GetTopicsRequest getRootAsGetTopicsRequest(ByteBuffer _bb, GetTopicsRequest obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createGetTopicsRequest(FlatBufferBuilder builder,
                                             int idsOffset) {
        builder.startObject(1);
        GetTopicsRequest.addIds(builder, idsOffset);
        return GetTopicsRequest.endGetTopicsRequest(builder);
    }

    public static void startGetTopicsRequest(FlatBufferBuilder builder) {
        builder.startObject(1);
    }

    public static void addIds(FlatBufferBuilder builder, int idsOffset) {
        builder.addOffset(0, idsOffset, 0);
    }

    public static int createIdsVector(FlatBufferBuilder builder, short[] data) {
        builder.startVector(2, data.length, 2);
        for (int i = data.length - 1; i >= 0; i--) builder.addShort(data[i]);
        return builder.endVector();
    }

    public static void startIdsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(2, numElems, 2);
    }

    public static int endGetTopicsRequest(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public GetTopicsRequest __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public short ids(int j) {
        int o = __offset(4);
        return o != 0 ? bb.getShort(__vector(o) + j * 2) : 0;
    }

    public int idsLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer idsAsByteBuffer() {
        return __vector_as_bytebuffer(4, 2);
    }
}

