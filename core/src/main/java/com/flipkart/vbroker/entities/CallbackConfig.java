// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.entities;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CallbackConfig extends Table {
  public static CallbackConfig getRootAsCallbackConfig(ByteBuffer _bb) { return getRootAsCallbackConfig(_bb, new CallbackConfig()); }
  public static CallbackConfig getRootAsCallbackConfig(ByteBuffer _bb, CallbackConfig obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public CallbackConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CodeRange codeRanges(int j) { return codeRanges(new CodeRange(), j); }
  public CodeRange codeRanges(CodeRange obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int codeRangesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createCallbackConfig(FlatBufferBuilder builder,
      int codeRangesOffset) {
    builder.startObject(1);
    CallbackConfig.addCodeRanges(builder, codeRangesOffset);
    return CallbackConfig.endCallbackConfig(builder);
  }

  public static void startCallbackConfig(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addCodeRanges(FlatBufferBuilder builder, int codeRangesOffset) { builder.addOffset(0, codeRangesOffset, 0); }
  public static int createCodeRangesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCodeRangesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endCallbackConfig(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

