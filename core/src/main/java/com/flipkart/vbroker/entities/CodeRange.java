// automatically generated by the FlatBuffers compiler, do not modify

package com.flipkart.vbroker.entities;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CodeRange extends Table {
    public static CodeRange getRootAsCodeRange(ByteBuffer _bb) {
        return getRootAsCodeRange(_bb, new CodeRange());
    }

    public static CodeRange getRootAsCodeRange(ByteBuffer _bb, CodeRange obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createCodeRange(FlatBufferBuilder builder,
                                      int fromOffset,
                                      int toOffset) {
        builder.startObject(2);
        CodeRange.addTo(builder, toOffset);
        CodeRange.addFrom(builder, fromOffset);
        return CodeRange.endCodeRange(builder);
    }

    public static void startCodeRange(FlatBufferBuilder builder) {
        builder.startObject(2);
    }

    public static void addFrom(FlatBufferBuilder builder, int fromOffset) {
        builder.addOffset(0, fromOffset, 0);
    }

    public static void addTo(FlatBufferBuilder builder, int toOffset) {
        builder.addOffset(1, toOffset, 0);
    }

    public static int endCodeRange(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public CodeRange __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String from() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer fromAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public String to() {
        int o = __offset(6);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer toAsByteBuffer() {
        return __vector_as_bytebuffer(6, 1);
    }
}

