namespace com.flipkart.vbroker.entities;

enum ApiKey:byte {ProduceRequest=0, ProduceResponse=1, TopicCreateRequest=2, TopicCreateResponse=3}

enum StatusCode:int16 {None=0, ProduceSuccess_NoError=101, ProduceFailed_NoLeader=151, ProduceFailed_NotEnoughReplicas=152, ConsumeSuccess_NoError=201, ConsumeError_DestinationDown=251}

table VStatus {
      statusCode:StatusCode;
      message:string;
}

union RequestMessage { ProduceRequest, FetchRequest }

enum HttpMethod:byte {POST=0, PUT=1, DELETE=2, PATCH=3}

table VRequest {
      version:int8;
      correlationId:int32;
      requestMessage:RequestMessage;
}

table HttpHeader {
      key:string;
      value:string;
}

table Message {
      messageId:string;
      groupId:string;
      crc:int8;
      version:int8;
      seqNo:int32;
      topicId:int16;
      partitionId:int16;
      attributes:int32;
      httpUri:string;
      httpMethod:HttpMethod;
      callbackTopicId:int16;
      callbackHttpUri:string;
      callbackHttpMethod:HttpMethod;
      headers:[HttpHeader];
      bodyLength:int32;
      bodyPayload:[int8];
}

table MessageSet {
      messages:[Message];
}

table TopicPartitionProduceRequest {
      partitionId:int16;
      requiredAcks:int16;
      messageSet:MessageSet;
}

table TopicProduceRequest {
      topicId:int16;
      partitionRequests:[TopicPartitionProduceRequest];
}

table ProduceRequest {
      topicRequests:[TopicProduceRequest];
}

table TopicPartitionFetchRequest {
      partitionId:int16;
      noOfMessages:int16;
}

table TopicFetchRequest {
      subscriptionId:int16;
      topicId:int16;
      partitionRequests:[TopicPartitionFetchRequest];
}

table FetchRequest {
      topicRequests:[TopicFetchRequest];
}

table TopicCreateRequest {
      topicId:int16;
}

root_type VRequest;


// responses

union ResponseMessage { ProduceResponse, FetchResponse }

table VResponse {
      correlationId:int32;
      responseMessage:ResponseMessage;
}

//ProduceResponse

table TopicPartitionProduceResponse {
      partitionId:int16;
      status:VStatus;
}

table TopicProduceResponse {
      topicId:int16;
      partitionResponses:[TopicPartitionProduceResponse];
}

table ProduceResponse {
      topicResponses:[TopicProduceResponse];
}

//FetchResponse

table TopicPartitionFetchResponse {
      partitionId:int16;
      status:VStatus;
      messageSet:MessageSet;
}

table TopicFetchResponse {
      subscriptionId:int16;
      topicId:int16;
      partitionResponses:[TopicPartitionFetchResponse];
}

table FetchResponse {
      topicResponses:[TopicFetchResponse];
}

root_type VResponse;
