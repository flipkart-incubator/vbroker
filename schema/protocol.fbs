namespace com.flipkart.vbroker.entities;

enum ApiKey:byte {ProduceRequest=0, ProduceResponse=1}

// status codes

enum StatusCode:int16 {
None=0,
ProduceSuccess_NoError=101,
ProduceFailed_NoLeader=151,
ProduceFailed_NotEnoughReplicas=152,
Success=200,
ConsumeSuccess_NoError=201,
ConsumeError_DestinationDown=251,
TopicCreateFailed_AlreadyExists=351, 
TopicCreateFailed_Validation=352,
SubscriptionCreateFailed_NoTopic=451, 
SubscriptionCreateFailed_AlreadyExists=452,
SubscriptionCreateFailed_Validation=453,
QueueCreateFailed_AlreadyExists=461,
QueueCreateFailed_Validation=462,
GetLagFailed=470,
GetLagFailed_NoTopic=471,
GetLagFailed_NoSubscription=472,
GetLagFailed_NoPartition=473,
GetLagFailed_Validation=474,
Invalid_Partitions=501,
Invalid_ReplicationFactor=502,
Leader_Not_Available=503,
Controller_Not_Available=504,
Not_Leader_For_Partition=505,
Entity_Not_Exists=506
}

// common entities

table HttpHeader {
	key:string;
	value:string;
}

table Message {
	messageId:string;
	groupId:string;
	crc:int8;
	version:int8;
	seqNo:int32;
	topicId:int16;
	partitionId:int16;
	attributes:int32;
	httpUri:string;
	httpMethod:HttpMethod;
	callbackTopicId:int16;
	callbackHttpUri:string;
	callbackHttpMethod:HttpMethod;
	headers:[HttpHeader];
	bodyLength:int32;
	bodyPayload:[int8];
}

table MessageSet {
	messages:[Message];
}

// request message types

union RequestMessage { ProduceRequest, FetchRequest, ControlRequest }
	
// requests
	
table VRequest {
	version:int8;
	correlationId:int32;
	requestMessage:RequestMessage;
}

// produce request

table TopicPartitionProduceRequest {
	partitionId:int16;
	requiredAcks:int16;
	messageSet:MessageSet;
}

table TopicProduceRequest {
	topicId:int16;
	partitionRequests:[TopicPartitionProduceRequest];
}

table ProduceRequest {
	topicRequests:[TopicProduceRequest];
}

// fetch request

table TopicPartitionFetchRequest {
	partitionId:int16;
	noOfMessages:int16;
}

table TopicFetchRequest {
	subscriptionId:int16;
	topicId:int16;
	partitionRequests:[TopicPartitionFetchRequest];
}

table FetchRequest {
	topicRequests:[TopicFetchRequest];
}

//control path request (get/create stuff)
table ControlRequest {
    payload:[byte];
}

root_type VRequest;


// responses

table VStatus {
	statusCode:StatusCode;
	message:string;
}

// response message types

union ResponseMessage { ProduceResponse, FetchResponse, ControlResponse }

table VResponse {
	correlationId:int32;
	responseMessage:ResponseMessage;
}

//ProduceResponse

table TopicPartitionProduceResponse {
	partitionId:int16;
	status:VStatus;
}

table TopicProduceResponse {
	topicId:int16;
	partitionResponses:[TopicPartitionProduceResponse];
}

table ProduceResponse {
	topicResponses:[TopicProduceResponse];
}

//FetchResponse

table TopicPartitionFetchResponse {
	partitionId:int16;
	status:VStatus;
	messageSet:MessageSet;
}

table TopicFetchResponse {
	subscriptionId:int16;
	topicId:int16;
	partitionResponses:[TopicPartitionFetchResponse];
}

table FetchResponse {
	topicResponses:[TopicFetchResponse];
}

//control path response
table ControlResponse {
    payload:[byte];
}

root_type VResponse;
